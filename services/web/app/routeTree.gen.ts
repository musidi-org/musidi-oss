/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as LegalTermsImport } from './routes/legal/terms'
import { Route as LegalPrivacyImport } from './routes/legal/privacy'
import { Route as AppTranscribeImport } from './routes/app/transcribe'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LegalTermsRoute = LegalTermsImport.update({
  id: '/legal/terms',
  path: '/legal/terms',
  getParentRoute: () => rootRoute,
} as any)

const LegalPrivacyRoute = LegalPrivacyImport.update({
  id: '/legal/privacy',
  path: '/legal/privacy',
  getParentRoute: () => rootRoute,
} as any)

const AppTranscribeRoute = AppTranscribeImport.update({
  id: '/app/transcribe',
  path: '/app/transcribe',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app/transcribe': {
      id: '/app/transcribe'
      path: '/app/transcribe'
      fullPath: '/app/transcribe'
      preLoaderRoute: typeof AppTranscribeImport
      parentRoute: typeof rootRoute
    }
    '/legal/privacy': {
      id: '/legal/privacy'
      path: '/legal/privacy'
      fullPath: '/legal/privacy'
      preLoaderRoute: typeof LegalPrivacyImport
      parentRoute: typeof rootRoute
    }
    '/legal/terms': {
      id: '/legal/terms'
      path: '/legal/terms'
      fullPath: '/legal/terms'
      preLoaderRoute: typeof LegalTermsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app/transcribe': typeof AppTranscribeRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/terms': typeof LegalTermsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app/transcribe': typeof AppTranscribeRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/terms': typeof LegalTermsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app/transcribe': typeof AppTranscribeRoute
  '/legal/privacy': typeof LegalPrivacyRoute
  '/legal/terms': typeof LegalTermsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app/transcribe' | '/legal/privacy' | '/legal/terms'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app/transcribe' | '/legal/privacy' | '/legal/terms'
  id: '__root__' | '/' | '/app/transcribe' | '/legal/privacy' | '/legal/terms'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppTranscribeRoute: typeof AppTranscribeRoute
  LegalPrivacyRoute: typeof LegalPrivacyRoute
  LegalTermsRoute: typeof LegalTermsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppTranscribeRoute: AppTranscribeRoute,
  LegalPrivacyRoute: LegalPrivacyRoute,
  LegalTermsRoute: LegalTermsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app/transcribe",
        "/legal/privacy",
        "/legal/terms"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app/transcribe": {
      "filePath": "app/transcribe.tsx"
    },
    "/legal/privacy": {
      "filePath": "legal/privacy.tsx"
    },
    "/legal/terms": {
      "filePath": "legal/terms.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
